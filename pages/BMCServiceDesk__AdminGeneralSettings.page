<apex:page standardStylesheets="false" showHeader="false" controller="BMCServiceDesk.AdminGeneralSettings">
   
    <c:CommonIncludes />
    <link rel="stylesheet" type="text/css" href="{!$Resource.SDEFStyles}/AdminGeneralSettings.css"/>
    <link rel="stylesheet" type="text/css" href="{!$Resource.SDEFExtJS}/ex/ux/css/Spinner.css" />
    <script type="text/javascript" src="{!$Resource.SDEFCommonJS}/AdminGeneralSettings.js"></script>
     <script type="text/javascript" src="{!$Resource.SDEFExtJS}/ex/ux/Spinner.js"></script>
    <script type="text/javascript" src="{!$Resource.SDEFExtJS}/ex/ux/SpinnerField.js"></script>
    <link rel="Stylesheet" type="text/css" href="{!$Resource.SDEFStyles}/HelpStyles.css" />    
<body id="bodyContents"> 
	<apex:outputPanel id="opSaveStatus"> 
        <script>
            var saveStatus = '{!saveStatus}';
        </script>
    </apex:outputPanel>
<script>
	var wikiUrl='{!wikiUrl}';
	var templateSectionHeaderLbl = '{!JSENCODE($Label.TemplateSettings)}', ovewriteTemplateCheckboxLabel = '{!JSENCODE($Label.Replace_Incident_Field)}', checkTemplateLabel = '{!JSENCODE($Label.EnableApplyTemplateIcon)}';
	var propOverwriteRecord = false;
	var ApplyTemplate = false;
	var showRFAccountChk = false;
	var showCollisionsPopupAutomaticallyChk = false;
    var currencyLengthValidationMsg = '{!JSENCODE($Label.defaultCurrencyLengthValidation)}';
    var lblEnableCustomFieldMapping = '{!JSENCODE($Label.EnableCustomFieldMapping)}';
     var column = '{!JSENCODE($Label.Column)}';
    
    var agentColumnValue;
    var SDEFStyles = '{!$Resource.SDEFStyles}';
    var startbuttontext='{!JSENCODE($Label.StartMilestoneButton)}';
    var stopbuttontext='{!JSENCODE($Label.StopMilestoneButton)}';
	
	var utilitystartbuttontext='{!JSENCODE($Label.ACStartservice)}';
    var utilitystopbuttontext='{!JSENCODE($Label.ACStopservice)}';
	
    var showRFAccountLbl = '{!JSENCODE($Label.ShowRemeforceAccounts)}';
    var showRFAccountTooltip = '{!JSENCODE($Label.ShowRFAccountTooltip)}';
        
    var showCollisionsPopupAutomaticallyLbl = '{!JSENCODE($Label.autoshowCollisionPopup)}';
    var showCollisionsPopupAutomaticallyCheckboxTooltip = '{!JSENCODE($Label.autoshowCollisionPopup)}';    
    var silverlightCIExplorerLabel = '{!JSENCODE($Label.silverlightCIExplorer)}';
    
    var milestonedefaulthourvalue = '{!milestonehours}';  
    var milestonedefaultminutevalue = '{!milestoneminutes}';
    var milestonedefaultdayvalue = '{!JSENCODE(milestonedays)}';
    var store;
    var MilestonehourField;
    var milestoneminuteField;
    var milestonedayField;
    var milestoneButton;
    var buttontext='{!jobrunnningflag}';
	var utilityJobFlag='{!utilityProcessorJobRunnningFlag}';
	var jobProcessorException = '{!JSENCODE($Label.Scheduled_Job_Exception)}';
     var AppAdm =  '{!JSENCODE(store)}';
     
var classForCheckbox = 'checkboxClass';

	var selectedSLAOWE = '{!JSENCODE(selectedSLAOWE)}';
	eval('{!OrgWideEmailList}');

var appSettingsTitle = '{!JSENCODE($Label.GeneralApplicationSetting)}';
   function getInternetExplorerVersion() {
        var rv = -1; // Return value assumes failure.
        if (navigator.appName == 'Microsoft Internet Explorer') {
            var ua = navigator.userAgent;
            var re = new RegExp("MSIE ([0-9]{1,}[\.0-9]{0,})");
    
            if (re.exec(ua) != null)
                rv = parseFloat(RegExp.$1);
        }
        return rv;
    }
    
    var ver = getInternetExplorerVersion();

    if (ver > -1) {
        if (ver >= 8.0){
            classForCheckbox = 'checkboxClass1';
        }        
    }
    var ObjectCustomFields = "";

    function showMessage(msg){
           Ext.MessageBox.show({
               id:'commonmsgbox',
               width: 250,
               title: appSettingsTitle,
               msg: msg,
               buttons: Ext.MessageBox.OK
           }); 
     }  
    
     function isSaveSuccessful() {
       	if((saveStatus == 'success' || saveStatus == '')){
	                	showMessage('{!JSENCODE($Label.SavedSuccessfully)}');
	                }else{
	                	showMessage('{!JSENCODE($Label.MsgSaveError)}'+saveStatus);
	                }
       }
       
    
</script>
<apex:outputPanel id="statusPanel">
   <script>
   
  	jobstatusflag='{!jobstatus}';
	utilityProcessorjobstatusflag='{!utilityProcessorJobStatus}';
  	
  	function onCompleteStart(){
	  	  if(jobstatusflag=='false'){
			Ext.MessageBox.show({ msg:'{!JSENCODE($Label.Scheduled_Job_Exception)}' , buttons: Ext.MessageBox.OK});
  		  }
	  Ext.getCmp('milestonebutton').setDisabled(false);
	}
	
	function onCompleteStop(){
		Ext.getCmp('milestonebutton').setDisabled(false);
	}
  	
  </script>		 
  </apex:outputPanel>
<apex:form id="myForm">
<div id="savetoolbar"></div>
   <div id = "slmPanelDiv" style ="width:auto;">
      <table class = "clsTable"> 
   		   <tr>
               <td class="clsHeading">{!$Label.SLM_Service_Target_Milestones}</td>
           </tr>
           
           <tr>
           	<td colspan="2">
           		<div id="msFromAddrLbl" class="clsProcessMilesone">{!$Label.EmailFromAddress}</div>
				<div id="msFromAddr"></div>
           	</td>
           </tr>
           <tr>
               <td colspan="6">
                   <div id="processMilestone" class="clsProcessMilesone" >{!$Label.Process_Milestone_Every}</div>
                   <div id="milestonehourFieldTD" ></div>
                   <div id="milestonehourLabelTD" class="clsmilestonedateField" >{!$Label.HoursLabel}</div>
               
                   <div class="" id="milestoneminuteFieldTD" style="float:left;"></div>
                   <div id="milestoneminLabelTD" class="clsmilestonedateField"  >{!$Label.MinutesLabel}</div>
              
                   <div id="milestoneButtonTD" class="clsmilestonebtnLabelTD" ></div>    
                
               </td>
           </tr>           
           <tr>
               <td colspan="3">
                   <div id="deleteprocessor" class="clsProcessMilesone" >{!$Label.Delete_Processor_History_Every}</div>
                   <div class="clsmilestonebtnLabelTD" id="milestonedayFieldTD" style="margin-top:5px;"></div>
                   <div id="milestonedayLabelTD" class="clsmilestonedateField" style="margin-top:5px;" >{!$Label.Days}</div>
               </td>
           </tr>
           <tr>
               <td class="cellspace"></td>
           </tr>
           <tr>
               <td class="clsHeading cellspace">{!$Label.RemedyforceUtilityService}</td>
           </tr>
           <tr>
               <td colspan="2">
                   <div id="utilityProcessorButtonTD" class="clsmilestonebtnLabelTD" style="margin-top:5px;"></div>
                </td>
           </tr>
       </table>
  </div>      
<apex:actionFunction name="savemodifiedData" action="{!SaveNewSettings}" onComplete="isSaveSuccessful();" reRender="opSaveStatus">
	<apex:param assignTo="{!FormDataString}" name="FormDataString" value=""/>
	<apex:param assignTo="{!dueDateByBusinessHoursValue}" name="dueDateByBusinessHours" value=""/>
    <apex:param assignTo="{!milestoneInterval}" name="milestoneInetervalData" value=""/>
    <apex:param assignTo="{!milestoneDeleteInterval}" name="milestoneDeleteData" value=""/>
    <apex:param assignTo="{!selectedSLAOWE}" name="selectedSLAOWE" value="" />
</apex:actionFunction>
<apex:actionfunction name="ScheduleJob" action="{!scheduleJobhelpermethod}" reRender="statusPanel" oncomplete="onCompleteStart()"/>
<apex:actionfunction name="StopJob" action="{!stopJobhelpermethod}" reRender="statusPanel" oncomplete="onCompleteStop()"/> 
<apex:actionfunction name="ScheduleUtilityProcessorJob" action="{!startScheduleUtilityJobProcessor}" reRender="statusPanel" oncomplete="onCompleteStartUtilProcessor()"/>
<apex:actionfunction name="StopUtilityProcessorJob" action="{!stopScheduleUtilityJobProcessor}" reRender="statusPanel" oncomplete="onCompleteStopUtilProcessor()"/> 
</apex:form>

<script>
var insertLoggedInUserIdLabel = '{!JSENCODE($Label.InsertLoggedInUserId)}';
var scrollBroadcastMessageLable ='{!JSENCODE($Label.ScrollBroadcastMessage)}';
var  automaticallyCalculateDueDateLabel = '{!JSENCODE($Label.AutoCalculateDueDate)}';
var  UseOpenDateForRecalculateDueDateLabel = '{!JSENCODE($Label.UseOpenDateForRecalculateDueDate)}';
var  UsePausedDurationToCalculateElapsedTimeLabel = '{!JSENCODE($Label.UsePausedDurationToCalculateElapsedTime)}';
var  ApplySLAonClose = '{!JSENCODE($Label.ApplySLAonClose)}';
var ApplySLAonCloseTooltip = '{!JSENCODE($Label.ApplySLAonCloseTooltip)}';  
var dueDateByBusinessHoursLabel = '{!JSENCODE($Label.DueDateByBusinessHours)}',  defaultCurrLabel = '{!JSENCODE($Label.DefaultCurrency)}',defaultCurrValue = '{!JSENCODE(defaultCurrency)}';
var releaseLabel = '{!JSENCODE($ObjectType.Release__c.LabelPlural)}', problemLabel = '{!JSENCODE($ObjectType.Problem__c.LabelPlural)}',changeLabel = '{!JSENCODE($ObjectType.Change_Request__c.LabelPlural)}', incidentLabel = '{!JSENCODE($ObjectType.Incident__c.LabelPlural)}';
var ConsoleLayOut = '{!JSENCODE($Label.ConsoleLayOut)}',  enableAndUseCon = '{!JSENCODE($Label.enableAndUseConsole)}' , agentUiLabel =  '{!JSENCODE($Label.AgentUserInterface)}' , linkedOpenTasks = '{!JSENCODE($Label.LinkedOpenTasks)}', closeRecords = '{!JSENCODE($Label.CloseRecords)}';
 var labelUp = '{!JSENCODE($Label.Up)}', sdefStyles = '{!$Resource.SDEFStyles}' , saveLabel = '{!JSENCODE($Label.save)}';
 var EnableCustomerExperienceLabel = '{!JSENCODE($Label.EnableCustomerExperience)}';
 var EnableAZERTYkeyboardLabel = '{!JSENCODE($Label.EnableAZERTYKeyboard)}' + '&nbsp;&nbsp;' + '<img src="{!$Resource.SSThemes}/SSDefaultTheme/SDEFicons/status-16-information.png" alt="{!JSENCODE($Label.SSHelp)}" height="13" width="13" title="{!JSENCODE($Label.EnableAZERTYKeyboardInfo)}"></img>';
    </script>

</body>
</apex:page>